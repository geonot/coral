store task
    description
    priority ? 1
    complete ? false

    make
        return log create
            $description
            $priority
            $complete

    complete
        id ? $id
        return log update $id complete true

task1 is task with description 'Implement command-oriented persistence'
task2 is task with description 'Write documentation'

task1.complete
task.complete(2)


message is 'hello coral'
ITERATIONS is 100
threshold is 0.95
SYSTEM_ACTIVE is true
PI is 3.1415926535

calculate_value 10, 20 
process_further result

primes is [2, 3, 5, 7, 11]
pending_tasks is []
pending_tasks add 'todo 1'
first_prime is primes at 0

net_config is {}
net_config.host is 'localhost'
net_config.port is 5000

fn greet with name, greeting 'Hello'
    '{greeting}, {name}. Welcome to Coral.'

fn compute_total with price, quantity, tax_rate 0.07
    sub_total is price * quantity
    sub_total + (sub_total * tax_rate)

greet 'Expert'
greet 'Dr. Coral', 'Salutations'

order_value is compute_total 100, 3

order_custom_tax is compute_total
    price 100, quantity 3, tax_rate 0.1

status_text is system_status at load_average gt 0.9 ? 'High Load' ! 'Normal Load'

iterate system_status.active_nodes check_health $

check_health across system_status.active_nodes
check_health across system_status.active_nodes into node_status 
check_health across system_status.active_nodes with host 'localhost' into node_status

while iterator lt 3
    log 'iterator is {iterator}'
 
until iterator from 2 by 2 equals 8
    log 'iterator is {iterator}'

unless x equals 0 process x
process x unless x equals 0

config is load 'coral.json'
load 'coral.json' as config

record is user with name 'root'

brandon is user 'brandon', 'brandon@email.com', 'password'

object datapoint
    value     
    processed ? no      
    timestamp ? now

    process
        processed is yes
        
d1 is datapoint with value 42
d2 is datapoint with value 100

d1.process!
d2.process!

store task
    description
    priority ? 1
    complete ? false

    set_complete
        id ? $0 
        update id complete true

    get_summary
        status is complete ? 'Done' ! 'Pending'
        'task {id} (P{priority}) - {status}: {description}'

log hash.blake3 'hello'

store message
    sender
    recipient
    subject ? empty
    body ? empty
    timestamp ? now
    acknowledged ? no

    as_string 
        'message:{id} from {sender} to {recipient}'
        'at {timestamp} (ack: {acknowledged})'
        'subject: {subject}'
        'body: {body}'
    
    as_map
        'id' is id
        'sender' is sender.id
        'recipient' is recipient.id
        'subject' is subject
        'body' is body
        'timestamp' is timestamp
        'acknowledged' is acknowledged
        
    as_list
        id, sender.id, recipient.id, 
        subject, body, timestamp, 
        acknowledged

store actor user
    name
    email
    password
    &blocklist
    &messages

    make
        password is hash.blake3 $password

    send
        recipient is user with $id
        recipient.receive $message

    authenticate
        pwd_hash is hash.blake3 $password
        pwd_hash equals password
        
    check_blocked
        id from user with username $username in blocklist

    @receive
        check_blocked log return

x is 'ok'